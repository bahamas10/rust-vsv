/*
 * Author: Dave Eddy <dave@daveeddy.com>
 * Date: February 15, 2022
 * License: MIT
 */

//! `vsv status` subcommand.

use anyhow::{Context, Result};
use rayon::prelude::*;
use yansi::Style;

use crate::config::Config;
use crate::runit;
use crate::service::Service;
use crate::{utils, utils::verbose};

/// Handle `vsv status` or `vsv` without a subcommand given.
pub fn do_status(cfg: &Config) -> Result<()> {
    // may or may not be set (option)
    let filter = cfg.operands.get(0);

    // find all services
    let services = runit::get_services(&cfg.svdir, cfg.log, filter)
        .with_context(|| {
            format!("failed to list services in {:?}", cfg.svdir)
        })?;

    // loop each service found (just gather data here, can be done in parallel)
    let services: Vec<(Service, Vec<String>)> = services
        .par_iter()
        .map(|service| {
            Service::from_runit_service(
                service,
                cfg.tree,
                &cfg.proc_path,
                &cfg.pstree_prog,
            )
        })
        .collect();

    // print gathared data
    let style = Style::default();

    verbose!(cfg, "found {} services in {:?}", services.len(), cfg.svdir);
    println!();
    println!(
        "{}",
        utils::format_status_line(
            ("", style.bold()),
            ("SERVICE", style.bold()),
            ("STATE", style.bold()),
            ("ENABLED", style.bold()),
            ("PID", style.bold()),
            ("COMMAND", style.bold()),
            ("TIME", style.bold()),
        )
    );

    // print each service found
    for (service, messages) in services {
        println!("{}", service);

        // print pstree if applicable
        if cfg.tree {
            let (tree_s, style) = service.format_pstree();
            println!("{}", style.paint(tree_s));
        }

        // print any verbose messages/warnings generated by the service
        for message in messages {
            verbose!(cfg, "{}", message);
        }
    }

    if !cfg.tree {
        // add a newline to the end of the output if no tree was printed
        println!();
    }

    Ok(())
}
